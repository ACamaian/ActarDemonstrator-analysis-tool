//Per C++
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <utility>
#include <map>

//Per ROOT
#include <TROOT.h>
#include <TSystem.h>
#include <TGClient.h>
#include <TMath.h>
#include <TCanvas.h>
#include <TTree.h>
#include <TFile.h>
#include <TTreeReader.h>
#include <TTreeReaderValue.h>
#include <TH2.h>
#include <TH1.h>
#include <TH3.h>
#include <TProfile.h>
#include <TString.h>
#include <TSpectrum.h>
#include <TLine.h>

//Per ARDA
#include <cRawEvent.h>
#include <cHit.h>
#include <cRawSignal.h>
#include <pSignal.h>

//Defined class
#include "../tools/cHitxyz.h"
#include "../tools/cEvent.h"

#define vdrift 0.01297 //mm/ns
#define nsample 512 //campioni
#define sampling_period 80 //ns, ie 12.5 MHz

#define nr 32
#define rinf 0
#define rup 32

#define ncol 64
#define cinf 0
#define cup 64

#define rbeam_inf 13 //
#define rbeam_up 18


#define upperlimit_time nsample*sampling_period //in ns

using namespace std;

void dat2root(TString fname="mc_data.dat",TString ltable="../LookupTable.dat"){
  
  ProcInfo_t info;
  
  
  TFile *f = new TFile(fname,"R");
  TTree *t = (TTree*)f->Get("rawEventTree");
  
  TTreeReader myReader(t);
  TTreeReaderValue<int> evnum(myReader,"eventnum");
  TTreeReaderValue<vector<cHit>> hits(myReader,"hits");
  
  
  //--.
  //Build TTree for output
  //---
  
  TString outname = fname(fname.Last('/')+1,fname.Length()-fname.Last('/'));
  outname = outname + "_clean.root";
  TFile *fout = new TFile (Form("../data/%s",outname.Data()),"RECREATE");
  TTree *tout = new TTree("CleanEventTree","Clean Event Tree with XYZ positions ");
  
  cEvent *event = new cEvent();
  tout->Branch("event", &event);
  
  //---
  // Tools for analysis
  //--
  
  TCanvas *c0 = new TCanvas("c0","c0",1400,700);
  c0->Divide(2,1);
 
  map<int, pair<int,int>> v_ybins_beam;
  map<int,int> zbeam_bin;
  map<int, pair<int,int>> z_in_time;
  map<int,int> is_a_good_beam;
  map<int,int> zcode;

  vector<bool> ycontinuity;  
  
  map<int, pair<float,float>> xy_map =  buildXYmap(ltable);
  
  TH1F* htime =  new TH1F("htime","htime",nsample,0,nsample*sampling_period+1);
  htime->SetXTitle("ns");
  TH2F* hzy =  new TH2F("hzy","hzy",nr,rinf,rup,nsample,0,nsample*sampling_period+1);
  hzy->SetXTitle("y pad");
  hzy->SetYTitle("ns");
  TH2F* hyx =  new TH2F("hyx","hyx",ncol,cinf,cup,nr,rinf,rup);
  hyx->SetXTitle("x pad");
  hyx->SetYTitle("y pad");

  TH2F* hzy_w =  new TH2F("hzy_w","hzy_w",nr,rinf,rup,nsample,0,nsample*sampling_period+1);
  hzy_w->SetXTitle("y pad");
  hzy_w->SetYTitle("ns");
  
  TH3F *hxyz = new TH3F("hxyz","hxyz",ncol,cinf,cup,nr,rinf,rup,nsample,0,nsample*sampling_period+1);
  hxyz->SetXTitle("x pad");
  hxyz->SetYTitle("y pad");
  hxyz->SetXTitle("z tbin");  
  
  TH2D* hyx_lim;

  myReader.SetEntry(t->GetEntries()-1);
  int last =  *evnum;
  myReader.SetEntry(0);
  int first = *evnum;

  bool can_be_above=false;
  bool can_be_below=false;
  bool cosmic=false;
  bool notrigger=false;
  bool nobeam=false;
  bool maylar=false;
  bool inf=false;
  bool up=false;
  
  //---
  //Loop on event
  //---
  
  vector<cHitxyz> event_hits;
  cHitxyz temp;
  uint entry=0;
  uint evgood=0;
  
  bool exit=false;
  bool anotherevent=true;
  int evsel=0;
  
  
  cout << "Total Entries: " << t->GetEntries() << endl;
  //while(myReader.Next()){
    while(!exit){
        
    bool good=false;
    
    event->clear();
    clean_th1(htime);
    clean_th2(hzy);
    clean_th2(hzy_w);
    clean_th2(hyx);
    clean_th3(hxyz);
  

    ycontinuity.clear();
    z_in_time.clear();    
       
    v_ybins_beam.clear();
    zbeam_bin.clear();
    is_a_good_beam.clear();
    zcode.clear();
    
    cosmic=false;
    notrigger=false;
    nobeam=false;
    maylar=false;

   
    myReader.SetEntry(0);
    int first = *evnum;
    myReader.SetEntry(t->GetEntries()-1);
    int last =  *evnum;
    
    cout << "First Event: " << first << " Last Event: " << last << endl; 
    cout << "Select event number: ";
    cin >> evsel;
    
    if (myReader.SetEntry(evsel-first) != TTreeReader::EEntryStatus::kEntryValid) {
      cout << "Error in retrieving the requested event" << endl;
      return;
    }
   
    
    
    if(entry%100==0)cout << "Entry n.: " << entry << endl;
    entry++;
    
    event_hits.clear();

    event->setEventNumber(*evnum);
    
    //preliminary check
    for(auto&&hit: *hits){ //preliminary check
      if(hit.getGlobalChannelId()>19999) continue; //not TPC

      Float_t time= hit.getPeakTime()*sampling_period;
      Float_t xx = xy_map[hit.getGlobalChannelId()].first;
      Float_t yy = xy_map[hit.getGlobalChannelId()].second; 
      Float_t xpad = (xx-1)/2;
      Float_t ypad = (yy-1)/2;
      
      if(time>upperlimit_time) continue;

      hxyz->Fill(xpad,ypad,time,hit.getPeakHeight());
      hzy->Fill(ypad,time);
      hzy_w->Fill(ypad,time,hit.getPeakHeight());
      hyx->Fill(xpad,ypad);

      if(ypad>=13 && ypad<=18){ //beam row
	htime->Fill(time,1);
      }
    }

    Int_t thr=20;
    Int_t range=5;
    zbeam_bin=peak_search(htime,thr,range); //+- 5*80ns; N.B restituisce i BIN a cui si trovano i candidati fasci
    if(zbeam_bin.size()<1) { //se non trovo eventi con almeno un candidato fascio, esco
      nobeam=true;
      continue;
    }
    for(auto &&z : zbeam_bin) {
      is_a_good_beam.emplace(z.first,false);
    }
    
    int outoftime=0;
    for(auto&& time:zbeam_bin){
      int abovebeam=hzy->Integral(0,-1,time.second+range+1,time.second+(int)(70./vdrift/sampling_period));
      int belowbeam=hzy->Integral(0,-1,time.second-(int)(120./vdrift/sampling_period),time.second-range-1);
      if(abovebeam<10 && belowbeam<10) {
     	outoftime++;
      }
    }
    
    if(outoftime==zbeam_bin.size()) {
      continue; //nella finestra di tempo possibile non c'è nulla
    }
    
    //cerco la continuità nei tempi e in y
    //TH1D *hz ;

    //cout << "Evnum: "<< *evnum << endl;
    for(auto &&z: zbeam_bin){

      z_in_time.emplace(z.first,make_pair(0,0));
      
      int zbeam=z.second;
      int zbinmin=zbeam-(int)(120./vdrift/sampling_period);
      int zbinmax=zbeam+(int)(70./vdrift/sampling_period);
      
      pair<int,int> temp = make_pair(0,0);
      temp = size(hzy,1,zbeam-1,zbeam+1,"x");
      v_ybins_beam.emplace(z.first,temp); //ritorna il primo e ultimo bin sopra 1;
      hzy->GetYaxis()->SetRange(zbinmin,zbinmax);           

      float beampad=nhit(hxyz,cinf+1,cup,v_ybins_beam[z.first].first,v_ybins_beam[z.first].second,z.second-range,z.second+range,1);
      if(beampad>120) continue;
      
      //conto i pad per intervalli di tempo
      
      float leftpad_up=nhit(hxyz,cinf+1,cup,rinf+1,v_ybins_beam[z.first].first-1,zbeam+range+1,zbinmax,1);
      float leftpad_mid=nhit(hxyz,cinf+1,cup,rinf+1,v_ybins_beam[z.first].first-1,zbeam-range,zbeam+range,1);
      float leftpad_low=nhit(hxyz,cinf+1,cup,rinf+1,v_ybins_beam[z.first].first-1,zbinmin,zbeam-range-1,1);      
      
      float rightpad_up=nhit(hxyz,cinf+1,cup,v_ybins_beam[z.first].second+1,rup,zbeam+range+1,zbinmax,1);
      float rightpad_mid=nhit(hxyz,cinf+1,cup,v_ybins_beam[z.first].second+1,rup,zbeam-range,zbeam+range,1);
      float rightpad_low=nhit(hxyz,cinf+1,cup,v_ybins_beam[z.first].second+1,rup,zbinmin,zbeam-range-1,1);       

      float pad[10]={leftpad_up,leftpad_mid,leftpad_low,rightpad_up,rightpad_mid,rightpad_low,leftpad_up+leftpad_mid,leftpad_mid+leftpad_low,rightpad_up+rightpad_mid,rightpad_mid+rightpad_low};

      bool table[10];
      for(int ic=0; ic<6; ic++) {
	if(pad[ic]>0)  table[ic]=true;
	else table[ic]=false;
      }
      if(pad[0]>0&&pad[1]>0 && pad[6]>0){
	table[6]=true;
	table[0]=false;
	table[1]=false;
      }
      else table[6]=false;
      if(pad[2]>0&&pad[1]>0 && pad[7]>0){
	table[7]=true;
	table[1]=false;
	table[2]=false;
      }
      else table[7]=false;
      if(pad[3]>0&&pad[4]>0 && pad[8]>0){
	table[8]=true;
	table[3]=false;
	table[4]=false;
      }
      else table[8]=false;
      if(pad[5]>0&&pad[4]>0 && pad[9]>0){
	table[9]=true;
	table[4]=false;
	table[5]=false;
      }
      else table[9]=false;

      //cout << z.second << " " << v_ybins_beam[z.first].first << " " << v_ybins_beam[z.first].second << endl;
      
      
      for(int ic=0; ic<10; ic++){
	bool bad=false;
	if(table[ic]==false) continue;
       
	
	int ybinmin=0;
	int ybinmax=0;
	if(ic==0 || ic==1 || ic==2 || ic==6 || ic==7){ybinmin=rinf+1; ybinmax=v_ybins_beam[z.first].first-1; }
	else if (ic==3 || ic==4 || ic==5 || ic==8 || ic==9){ybinmin=v_ybins_beam[z.first].second+1, ybinmax=rup;}

	int zmin=0;
	int zmax=0;
	if(ic==0 || ic==3){zmin=zbeam+range+1; zmax=zbinmax;}
	else if(ic==1 || ic==4) {zmin=zbeam-range; zmax=zbeam+range;}
	else if(ic==2 || ic==5) {zmin=zbinmin; zmax=zbeam-range-1;}
	else if(ic==6 || ic==8) {zmin=zbeam-range; zmax=zbinmax;}
	else if(ic==7 || ic==9) {zmin=zbinmin-range; zmax=zbeam+range;}
	
	//cout << ic << " " << table[ic] << " " << pad[ic] << " " << ybinmin << " " << ybinmax << " " << zmin << " " << zmax << endl;
	
	//tempi nella finestra
	// hz = hzy_w->ProjectionY("hz",ybinmin,ybinmax);
	vector<pair<int,int>> temp_time = time_tracks(hzy,ybinmin,ybinmax,zmin,zmax);
	int type=-1;
	for(int j=0; j<temp_time.size(); j++) {
	  float ref=0, val=0, first=0, last=0;
	  if(temp_time[j].first<zbeam && temp_time[j].second>zbeam) {
	    type=-99;
	    //cout << "track crossing beam time" << endl;
	    bad=true;
	  }
	  

	  if(bad!=true){
	    if(temp_time[j].second<=zbeam) {
	      if(temp_time[j].first<zbeam-range){
		type=0;
		ref=zbeam;
		val=temp_time[j].second;
		last=zbeam+range+1;
		first=temp_time[j].first-1;
	      }
	      else{
		type=0;
		ref=zbeam-range;
		val=temp_time[j].second;
		last=zbeam+range+1;
		first=temp_time[j].first-1;
	      }
	    }
	    else if (temp_time[j].second>zbeam){
	      if(temp_time[j].first<zbeam+range){
		type=3;
		ref=zbeam;
		val=temp_time[j].first;
		last=temp_time[j].second+1;
		first=zbeam-range-1;
	      }
	      else{
		type=1;
		ref=zbeam+range;
		val=temp_time[j].first;
		last=temp_time[j].second+1;
		first=zbeam-range-1;
	      }
	    }
	  }
	  
	  //cout << type << " : " << ref << "-" << val << " -> " << first << " " << last << endl;
	  //cout << type << " : " << zbeam << " " << zbeam-range << " " << zbeam+range << "->" << temp_time[j].first << " " << temp_time[j].second << endl;
	  
	  TH1D *hy = hzy->ProjectionX("hy",first,last);
	  //cout << ybinmin << " " << ybinmax << endl;

	  if((ic<3 || ic==6 || ic==7) && hy->GetBinContent(ybinmax)==0){
	    zcode.emplace(z.first*100+ic,-3);
	    //cout << "no y continuity" << endl;
	    bad=true;
	  }
	  else if (((ic>=3 && ic<6) || ic==8 || ic==9) && hy->GetBinContent(ybinmin)==0){
	    zcode.emplace(z.first*100+ic,-3);
	    //cout << "no y continuity" << endl;
	    bad=true;
	  }
	  	  
	  if(abs(ref-val)>10) {
	    //cout << "lontano" << endl;
	    zcode.emplace(z.first*100+ic,-4);
	    bad=true;
	    //continue;
	  }

	  if(bad!=true){
	    //cout << "! is in !" << endl;

	    int npad_true=0;
	    int in_npad_true=0;
	    if(ic<3 || ic==6 || ic==7) npad_true=nhit(hxyz,1,64,1,13,first,last,1);
	    if(ic==3 || ic==4 || ic==5 || ic==8 || ic==9) npad_true=nhit(hxyz,1,64,21,32,first,last,1);

	    // in_npad_true=nhit(hxyz,1,64,13,18,first,last,1);

	    // if(in_npad_true<10){
	    //   //cout << "no_beam " << endl;
	    //   continue;
	    // }

	    //cout << npad_true <<  " " << ic << " " << first << " " << last << endl;
	    
	    if(npad_true<10) {
	      //cout << "But no Trigger" << endl;
	      zcode.emplace(z.first*100+ic,-5);
	      bad=true;
	      //continue;
	    }
	    
	    // if(npad_true>120) {
	    //   //cout << npad_true << " NOISE" << endl;
	    //   zcode.emplace(z.first*100+ic,-6);
	    //   bad=true;
	    //   //continue;
	    // }

	    if(bad==true) continue;
	    // cout << ic << "->" << npad_true << endl;
	    //cout << "AND GOOD" << endl;

	    pair<int,int> bin_time=make_pair(first,last);
	    z_in_time[z.first]=bin_time;
	    is_a_good_beam[z.first]=true;
	    good=true;
	    zcode.emplace(z.first*100+ic,1);
	  }	
	}
      }
    }
    hzy->GetXaxis()->UnZoom();
    hzy->GetYaxis()->UnZoom();

    
    TLine l;
    c0->cd(1);
    hzy->Draw("col");
    for(auto &&z: zbeam_bin){
      l.SetLineColor(1);

      if(is_a_good_beam[z.first]==false) continue;
      
      l.DrawLine(rinf,hzy->GetYaxis()->GetBinCenter(z.second),rup,hzy->GetYaxis()->GetBinCenter(z.second));
      l.DrawLine(rinf,hzy->GetYaxis()->GetBinCenter(z.second+range),rup,hzy->GetYaxis()->GetBinCenter(z.second+range));
      l.DrawLine(rinf,hzy->GetYaxis()->GetBinCenter(z.second-range),rup,hzy->GetYaxis()->GetBinCenter(z.second-range));
      
      l.SetLineColor(4);
      l.DrawLine(v_ybins_beam[z.first].first-1,0,v_ybins_beam[z.first].first-1,nsample*sampling_period);
      l.DrawLine(v_ybins_beam[z.first].second,0,v_ybins_beam[z.first].second,nsample*sampling_period);
      
      
      l.SetLineColor(3);
      l.DrawLine(rinf,hzy->GetYaxis()->GetBinCenter(z_in_time[z.first].first),rup,hzy->GetYaxis()->GetBinCenter(z_in_time[z.first].first));
      l.DrawLine(rinf,hzy->GetYaxis()->GetBinCenter(z_in_time[z.first].second),rup,hzy->GetYaxis()->GetBinCenter(z_in_time[z.first].second));
      
      //   l.DrawLine(rinf,hzy->GetYaxis()->GetBinCenter(z.first)-120./vdrift,rup,hzy->GetYaxis()->GetBinCenter(z.first)-120./vdrift);
      // l.DrawLine(rinf,hzy->GetYaxis()->GetBinCenter(z.first)+50./vdrift,rup,hzy->GetYaxis()->GetBinCenter(z.first)+50./vdrift);
    }

    c0->cd(2);
    hxyz->Draw("");
  
    c0->Modified();
    c0->Update();

    ica=0;
    cout << "e for another event, q for exit" << endl;
    c0->Connect("ProcessedEvent(Int_t,Int_t,Int_t,TObject*)", 0, 0,
    		"terminal_input(Int_t,Int_t,Int_t,TObject*)");//connette il canvas a un evento grafico (non chiarissimo come funziona)
    while(ica!=1){
      usleep(100);
      gClient->HandleInput();//fondamentale, se no non funziona
    }
    c0->Disconnect("ProcessedEvent(Int_t,Int_t,Int_t,TObject*)");


    if(good==false) {
      event->setZbeam(zbeam_bin);
      event->setZcode(zcode);
      event->setIsgood(false);
      tout->Fill();
      continue;
    }
    evgood++;
   
    for(auto&& hit: *hits){ 
      if(hit.getGlobalChannelId()>19999) continue; //not TPC
      temp.clear();
      Float_t max = hit.getPeakHeight();
      Float_t max_adc = hit.getPeakTime();

      Int_t gid = hit.getGlobalChannelId();
      Float_t xpos = xy_map[gid].first;
      Float_t ypos = xy_map[gid].second;
      Float_t zpos = vdrift*max_adc*sampling_period;
      Float_t time= hit.getPeakTime()*sampling_period;

      for(auto &&z:zbeam_bin){

    	if(is_a_good_beam[z.first]==false) continue;
	
    	if(time<hzy->GetYaxis()->GetBinCenter(z_in_time[z.first].first)) continue;
    	if(time>hzy->GetYaxis()->GetBinCenter(z_in_time[z.first].second)) continue;

	temp.setPeakHeight(max);
    	temp.setGlobalChannelId(gid);
    	temp.setPeakTime(max_adc);
    	temp.setXYZ(xpos,ypos,zpos);
	
    	//cout << xpos << " " << ypos << " " << zpos << endl;
    	event_hits.push_back(temp);
	
      }
    }

    
    event->setZbeam(zbeam_bin);
    event->setZcode(zcode);
    event->setIsgood(true);
    event->append(event_hits);
    tout->Fill();

  
    
    if(in=='q') break;

    
  }
  cout << evgood << endl;
  
  f->Close();
  fout->cd();
  tout->Write();
  fout->Close();
}


void terminal_input(Int_t event, Int_t x, Int_t y, TObject *selected){

  if(event==24){ //tastiera su TPad
    if(gPad->GetEventX() == 101) { // e
      in = "e";
      ica=1;
      return;
    }
    if(gPad->GetEventX() == 113) { // q
      in = "q";
      ica=1; 
      return;
    }
    if(gPad->GetEventX() == 110) { // n
      in = "n";
      ica=1; 
      return;
    }
  }
  
}


map<int,pair<float,float>> buildXYmap(TString lookup){

  map<int, pair<float,float> > xy;
  
  ifstream in(lookup);
  pair<int,int> col_row;
  if(!in){
    cout << "Error while trying to open lookup table file " << lookup << endl;
    col_row=make_pair(-1,-1);
    xy.emplace(-1,col_row);
    return xy;
    }

  string line;
  getline(in,line); //la prima riga è intestazione
  
  while(getline(in,line)){
    Int_t  type = -1,
      cob  = -1,
      asad = -1,
      aget = -1,
      chan = -1,
      det = -1,
      row = -1,
      col = -1,
      num = -1;
    string nom = "";
    
    if (line.length() > 0) {
      if (line[0] != '#') {
        stringstream ss;
        ss.str(line);
	ss >>type
	   >>cob
	   >>asad
	   >>aget
	   >>chan
	   >>det
	   >>row
	   >>col
	   >>num
	   >>nom;
      }
    }

    if(cob>=2) continue;
    if(chan==11 || chan==22 || chan==45 || chan==56) continue; //no fpn;
    
    int gid= chan+aget*100+asad*1000+cob*10000;
    col_row = make_pair(col*2+1,row*2+1); //in mm;
  
    xy.emplace(gid,col_row);
    
  }//end while

  return xy;
}

pair<float,float> getXYFromGlobalID(int gsel, TString lookup){

  pair<int, int> col_row;
  col_row=getPadFromGlobalID(gsel,lookup);

  pair<float,float> xy;
  xy = make_pair(col_row.first+1,col_row.second+1); // in mm;

  return xy;
}

pair<int, int> getPadFromGlobalID(int gsel, TString lookup){

  ifstream in(lookup);

  pair<int,int> col_row;
  
  if(!in){
    cout << "Error while trying to open lookup table file " << lookup << endl;
    return col_row=make_pair(-1,-1);
  }

  string line;
  getline(in,line); //la prima riga è intestazione
   
  while(getline(in,line)){
    Int_t  type = -1,
      cob  = -1,
      asad = -1,
      aget = -1,
      chan = -1,
      det = -1,
      row = -1,
      col = -1,
      num = -1;
    string nom = "";
    
    if (line.length() > 0) {
      if (line[0] != '#') {
        stringstream ss;
        ss.str(line);
	ss >>type
	   >>cob
	   >>asad
	   >>aget
	   >>chan
	   >>det
	   >>row
	   >>col
	   >>num
	   >>nom;
      }
    }
    
    int gid= chan+aget*100+asad*1000+cob*10000;
    if(gid==gsel){
      col_row = make_pair(col,row);
      break;
    }
  }

  return col_row;
}


void clean_th1(TH1 *h){
  for(int i=1; i<=h->GetNbinsX(); i++){
    h->SetBinContent(i,0);
  }
  h->ResetStats();
}

void clean_th2(TH2 *h){
  for(int i=1; i<=h->GetNbinsX(); i++){
    for(int j=1; j<=h->GetNbinsY(); j++){
      h->SetBinContent(i,j,0);
    }
  }
    h->ResetStats();
}

void clean_th3(TH3 *h){
  for(int i=1; i<=h->GetNbinsX(); i++){
    for(int j=1; j<=h->GetNbinsY(); j++){
      for(int k=1; k<=h->GetNbinsZ(); k++){
	h->SetBinContent(i,j,k,0);
      }
    }
  }
  h->ResetStats();
}


map<int,int> peak_search(TH1*h, int thr, int range){

  int nfound=0;
  vector<int> xp;
  vector<int> xbin;

  int cnt=0;
  int cnt_up=0;
  int cnt_down=0;
  int cnt_up2=0;
  int cnt_down2=0;

  float time=0;
  float integral=0;
  for(int i=2; i<h->GetNbinsX(); i++){
    cnt=0;
    cnt_up=0;
    cnt_down=0;

    cnt=h->GetBinContent(i);
    cnt_up=h->GetBinContent(i+1);
    cnt_down=h->GetBinContent(i-1);
    cnt_up2=h->GetBinContent(i+2);
    cnt_down2=h->GetBinContent(i-2);

    time=h->GetBinCenter(i);
    integral=h->Integral(i-range,i+range);
    if(cnt>cnt_down && cnt>cnt_up){
      if(integral>thr){
	xp.push_back(time);
	xbin.push_back(i);
	nfound++;
      }
    }
    if(cnt>cnt_down&&cnt==cnt_up&&cnt>cnt_up2){
      if(integral>thr){
	xp.push_back(time);
	xbin.push_back(i);
	nfound++;
      }
    }
  }

  map<int,int> xxp;

  // for(int i=0; i<xp.size(); i++){
  //   cout << xbin[i] << " ";
  // }
  // cout << " \n";
  
  for(int i=0; i<xp.size(); i++){
    if(xp.size()>1){
      if(i+1==xp.size()){
	//cout << "salvo " << xbin[i] <<   endl;
	xxp.emplace(xbin[i],xbin[i]);
	break;
      }
      else{
	for(int j=i+1; j<xp.size(); j++){
	  //	cout << xp[i] << " " << xp[j] << endl;
	  //cout << xbin[i] << " " << xbin[j] << endl;
	  if(abs(xp[i]-xp[j])>range*h->GetBinWidth(1)) {
	    //cout << "salvo " << xbin[i] <<   endl;
	    xxp.emplace(xbin[i],xbin[i]);
	    break;
	  }
	  else{
	    //cout << "medio" << endl;
	    xp[i+1]=(xp[i]+xp[j])/2.;
	    xbin[i+1]=(xbin[i]+xbin[j])/2;
	    break;
	  }
	}
      }
    }
    else{
      xxp.emplace(xbin[i],xbin[i]);
    }
    
  }
    
  
    return xxp;
}


pair<int,int> size(TH2*h,int thr, int yinf, int yup, TString s){
   
  TH1D* hp;
  if(s=="x"){
    hp=h->ProjectionX("temp",yinf,yup);
  }
  
  pair<int,int> bins;
  int min=0;//hp->FindFirstBinAbove(thr);
  int max=0;//hp->FindLastBinAbove(thr);
  for(int i=14; i<=20; i++){
    //cout << i << " " << hp->GetBinContent(i) << endl;
    if(hp->GetBinContent(i)>=thr){
    min=i;
    break;
    }
  }
  for(int i=20; i>=14; i--){
    if(hp->GetBinContent(i)>=thr){
      max=i;
      break;
    }
  }
  bins=make_pair(min,max);
  
  delete hp;
  return bins;
  
   
}


    
int nhit(TH3*h,int xmin, int xmax, int ymin, int ymax, int zmin, int zmax, int thr){

  int npad=0;

  h->GetZaxis()->SetRange(zmin,zmax);
  h->GetXaxis()->SetRange(xmin,xmax);
  h->GetYaxis()->SetRange(ymin,ymax);
  
  TH2D *hp =(TH2D*)h->Project3D("yx");
  
  for(int i=hp->GetXaxis()->GetFirst(); i<hp->GetXaxis()->GetLast(); i++){
    for(int j=hp->GetYaxis()->GetFirst(); j<hp->GetYaxis()->GetLast(); j++){
      if(hp->GetBinContent(i,j)>thr) {
	npad++;
      }
    }
  }

  // TCanvas *c1=new TCanvas("c1","c1");
  // hp->Draw("col");
  // c1->Modified();
  // c1->Update();
  // getchar();
  // delete c1;
  
  h->GetZaxis()->UnZoom();
  h->GetYaxis()->UnZoom();
  h->GetXaxis()->UnZoom();
  delete hp;
  return npad;
}


vector<pair<int,int>>  time_tracks(TH2*h,int ybinmin, int ybinmax, int zmin, int zmax){
  h->GetYaxis()->SetRange(zmin,zmax);
  TH1D* hz = h->ProjectionY("hz",ybinmin,ybinmax);
  
  int nzero_cons=0, nfull=0;
  int start=-1, stop=-1;
  vector<pair<int,int>> serv;
  vector<pair<int,int>> picco;
  for(int ibin=hz->GetXaxis()->GetFirst(); ibin<=hz->GetXaxis()->GetLast(); ibin++){
    
    if(hz->GetBinContent(ibin)>0) {nfull++; nzero_cons=0;}
    if(hz->GetBinContent(ibin)==0) {nzero_cons++;}
    
    if(ibin==hz->GetXaxis()->GetFirst() && hz->GetBinContent(ibin)>0 && hz->GetBinContent(ibin+1)>0 && start==-1){
      start=ibin;
    }
    if(ibin>hz->GetXaxis()->GetFirst() && hz->GetBinContent(ibin)>0 && hz->GetBinContent(ibin-1)==0 && start==-1) {
      start=ibin;
    }  
    if(ibin<=hz->GetNbinsX()-1 && hz->GetBinContent(ibin)>0 && hz->GetBinContent(ibin+1)==0 && stop==-1 && nfull>1){
      stop=ibin;
    }
    if(ibin==hz->GetNbinsX() && hz->GetBinContent(ibin)>0 && hz->GetBinContent(ibin-2)>0){
      stop=ibin;
    }
    
    //cout << ibin << " " << hz->GetBinContent(ibin) << " -> " << nzero_cons << " " << nfull << " -> " << start << " " << stop << endl;
    
    if(start!=-1 && stop!=-1){
      //cout << "Picco: " << start << " " << stop << endl;
      serv.push_back(make_pair(start,stop));
      start=-1;
      stop=-1;
      nzero_cons=0;
      nfull=0;
    }
    
    if(nzero_cons==10 || ibin==hz->GetNbinsX()){
      int offset = h->GetYaxis()->GetFirst()-1;
      if(serv.size()>1) {
	//cout << "!!!! " << serv[0].first << " " << serv[serv.size()-1].second << " !!!!" << endl;
	//cout << hz->Integral(serv[0].first,serv[serv.size()-1].second) << endl;
	//if(hz->Integral(serv[0].first,serv[serv.size()-1].second)>10)

	picco.push_back(make_pair(serv[0].first+offset, serv[serv.size()-1].second+offset));
      }
      else if (serv.size()==1) {
	//cout << "!!!! " << serv[0].first << " " << serv[0].second << " !!!!" << endl;
	//if(hz->Integral(serv[0].first,serv[0].second)>100)

	picco.push_back(make_pair(serv[0].first+offset, serv[0].second+offset));
      }
      start=-1;
      stop=-1;
      nfull=0;
      nzero_cons=0;
      serv.clear();
    }
    
    
  }
  return picco;
}
